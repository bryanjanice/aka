#!/usr/bin/env ruby
require 'rubygems'
require 'net/scp'
require 'colorize'
require "safe_yaml/load"
require 'highline/import'
require 'commander/import'

default_command :version #note that this is calling command :version

# always_trace
program :help_formatter, :compact
program :author, 'ytbryan'
program :contact, 'Bryan Lim <ytbryan@gmail.com>'
program :version, '0.3.67'
program :last_update, '21 Jan 2015'
program :description, 'add, remove, edit, manage and grow your aliases from terminal.'

command :global do |c|
  c.syntax = 'aka global [options]'
  c.summary = 'set the global aliases'
  c.action do |args, options|
    value = read("read_yml('.config')['global']")
    if value == ""
      puts "No global aliases found. To set the alias group -> aka global [name]".red
    else
      puts value
    end
  end
end

command :local do |c|
  c.syntax = 'aka local [options]'
  c.summary = 'set the local group'
  c.action do |args, options|
    if args.first
      write(args.first, ".aka")
      puts "#{args.first} .aka created."
    else
      value = read(".aka")
      if value == ""
        puts "No local group alias found. To create a .group -> aka local [name]".red
      else
        puts value
      end
    end
  end
end

###########################
### CORE
###########################

command :clean do |c|
  c.syntax = 'aka clean [options]'
  c.summary = 'remove newlines in dot file'
  c.action do |args, options|
    cleanup()
  end
end

command :setup do |c|
  c.syntax = 'aka setup [options]'
  c.summary = 'setup aka'
  c.action do |args, options|
    increase_history_limit()
    insert_trap()
    # 10.times do { cleanup() }
  end
end

command :last do |c|
  c.syntax = 'aka last [options]'
  c.summary = 'show the last few aliases'
  c.action do |args, options|
    if args.first
      showlast(args.first.to_i) if args.first.is_i?
    else
      showlast(10)
    end
  end
end

command :reload do |c|
  c.syntax = 'aka reload'
  c.summary = 'reload dot file'
  c.action do |args, options|
    reload_dot_file()
  end
end

command :add do |c|
  c.syntax = 'aka add [options]'
  c.summary = 'add an alias'
  c.option '--noreload', 'switch off reloading'
  c.action do |args, options|
    result = add(args.first) if args.first
    reload_dot_file() if result == true and !options.noreload
  end
end

command :show do |c|
  c.syntax = 'aka show [options]'
  c.summary = 'show an alias'
  c.action do |args, options|
    show_alias(args.first) if args.first
  end
end

command :usage do |c|
  c.syntax = 'aka usage [options]'
  c.summary = 'show usage'
  c.action do |args, options|
    if args.first
      showUsage(args.first.to_i) if args.first.is_i?
    else
      showUsage(10)
    end
  end
end

command :remove do |c|
  c.syntax = 'aka remove [options]'
  c.summary = 'remove an alias'
  c.option '--noreload', 'switch off reloading'
  c.option '--nounalias', 'switch off unaliasing'
  c.action do |args, options|
    result = remove(args.first) if args.first
    unalias_the(args.first) if !options.nounalias and result == true and args.first
    reload_dot_file() if result == true and !options.noreload
  end
end
alias_command :'rm', :remove

command :edit do |c|
  c.syntax = 'aka edit [options]'
  c.summary = 'edit the alias'
  c.option '--noreload', 'switch off reloading'
  c.option '--name', 'edit the name only'
  c.action do |args, options|
    if args.first
      values = args.first.split("=")
      if values.size > 1
        truth, _alias = show_alias(args.first)
        if truth == true
          if options.name
            remove(_alias) #remove that alias
            edit_alias(values[1], _alias) #edit that alias
            reload_dot_file() if !options.noreload
          else
            remove(_alias) #remove that alias
            edit(values[1], _alias) #edit that alias
            reload_dot_file() if !options.noreload
          end
        else
          puts "alias '#{args.first}' cannot be found".red
        end
      else
        truth, _alias, command = show_alias(args.first)
        if truth == true
          if options.name
            # value = args.first.split("=")
            input = ask "Enter a new alias for command '#{command}'?\n"
            answer = ask "#{input} confirm? (y/N)"
            if answer == 'y'
              remove(_alias) #remove that alias
              edit_alias(input, _alias) #edit that alias
              reload_dot_file() if !options.noreload
            end
          else
            input = ask "Enter a new command for alias '#{args.first}'?\n"
            answer = ask "#{input} confirm? (y/N)"
            if answer == 'y'
              remove(_alias) #remove that alias
              edit(input, _alias) #edit that alias
              reload_dot_file() if !options.noreload
            end
          end
        else
          puts "alias '#{args.first}' cannot be found".red
        end
      end
    end #if args.first

  end
end

command :version do |c|
  c.syntax = 'aka version'
  c.summary = 'show aka version'
  c.action do |args, options|
    version()
    puts ""
  end
end
alias_command :v, :version

command :count do |c|
  c.syntax = 'aka count [options]'
  c.summary = 'count number of alias'
  c.action do |args, options|
    puts "#{count()} aliases from #{read_yml(".config")["location"]}"
  end
end

###########################
### DEVELOPMENT
###########################

command :build do |c|
  c.syntax = 'aka build [options]'
  c.summary = 'build the VERSION file and run tests'
  c.action do |args, options|
    write(program(:version), './VERSION')
    puts "VERSION #{program(:version)} created at #{Time.now.strftime("%I:%M%p, %A, %d %b %Y")}"
  end
end

command :copy do |c|
  c.syntax = 'aka copy [options]'
  c.summary = 'copy a local copy of aka to /usr/local/bin'
  c.action do |args, options|
    result = system("sudo cp aka /usr/local/bin")
    puts "Installed aka #{program(:version)} into /usr/local/bin (#{Time.now.strftime("%I:%M%p,%a,%d %b %Y")}).".red if result == true
    puts "" if result == true
  end
end

command :bundle do |c|
  c.syntax = 'aka bundle [options]'
  c.summary = 'bundle install dependencies'
  c.action do |args, options|
    system("cd ~/.aka")
    system("bundle install")
  end
end

command :uninstall do |c|
  c.syntax = 'aka uninstall [options]'
  c.summary = 'uninstall aka'
  c.action do |args, options|
    input = ask "Confirm that you want to uninstall aka? (y/N)"
    system("sudo rm -rf ~/.aka; sudo rm -rf /usr/local/bin/aka;") if input == "y"
  end
end

command :set do |c|
  c.syntax = 'aka set [options]'
  c.summary = 'set the path to a dot file'
  c.action do |args, options|
    FileUtils.touch(read_yml(".config")["location"]) if File.exists?(read_yml(".config")["location"])
    File.write(read_yml(".config")["location"], args.first) if File.exists?(args.first) #if the file exists
  end
end

command :update do |c|
  c.syntax = 'aka update [options]'
  c.summary = 'update this aka'
  c.action do |args, options|
    update()
  end
end

#aka bb --from path_from_remote --to ytbryan@12312.12.312.3.12.3 --of /path_th_local
# ./aka beamback --from /home/ytbryan/hello --to admin@xxx.xxx.xxx.xxx:port_number_here --of /Users/ytbryan/Desktop/hello
  command :download do |c|
    c.syntax = 'aka download [options]'
    c.summary = 'download a dot file from server'
    c.action do |args, options|
      if options.from and options.to and options.of
        arr = split(options.to.to_s)
        pw = ask "What's the password?"
        result = Net::SCP.download!(arr[1], #remote
        arr.first,#username
        options.from.to_s, #remote_path
        options.of.to_s, #local_path
        :ssh => {:password => pw,
          :port => arr[2]}) if pw
        end
      end
    end
    alias_command :dl, :download

    command :upload do |c|
      c.syntax = 'aka upload [options]'
      c.summary = 'upload a dot file to server'
      c.action do |args, options|
        if options.from and options.to and options.of
          if File.exists?(options.from.to_s)
            arr = split(options.to.to_s)
            result = Net::SCP.upload!(arr[1], #remote
            arr.first, #username
            options.from.to_s, #local_path
            options.of.to_s, #remote_path
            :ssh => {:port => arr[2]})
          else
            puts "Cannot find #{options.from}"
          end
        end
      end
    end

  #############################
  ## Tests
  #############################
  command :test do |c|
    c.syntax = 'aka test [options]'
    c.summary = 'run the tests'
    c.action do |args, options|
      system("ruby #{read_yml(".config")["aka"]}/tests/test.rb")
    end
  end

  command :group do |c|
    c.syntax = 'aka group [options]'
    c.summary = 'create a new group for aliases'
    c.action do |args, options|
      #look at groups/ and print out all the files
      puts "group is not found at #{Dir.pwd}.\nTo set a group name, type aka group [name]".red
    end
  end
  alias_command :g, :group

  #############################
  ## Methods
  #############################

  private

  def read_yml path
    return YAML.load_file(path)
  end

  def write_yml path, theyml
    File.open(path, 'w') {|f| f.write theyml.to_yaml } #Store
  end

  def write_with array
    File.open(read_yml(".config")["location"], 'w') { |file|
      array.each do |line|
        file.write(line)
      end
    }
  end

  def write_with_newline array
    File.open(read_yml(".config")["location"], 'w') { |file|
      array.each do |line|
        file.write(line + "\n")
      end
    }
  end

  def write str, path
    File.open(path, 'w') { |file| file.write(str) }
  end

  def append str, path
    File.open(path, 'a') { |file| file.write(str) }
  end

  def append_with_newline str, path
    File.open(path, 'a') { |file| file.write(str + "\n") }
  end

  def reload_dot_file
    system("kill -SIGUSR1 #{Process.ppid}")
  end

  def unalias_the value
    system "echo '#{value}' > ~/sigusr1-args;"
    system "kill -SIGUSR2 #{Process.ppid}"
  end

  def split_domain_user fulldomain
    username = fulldomain.split("@").first
    domain = fulldomain.split("@")[1]
    return [username, domain]
  end

  def split fulldomain
    username = fulldomain.split("@").first
    domain = fulldomain.split("@")[1].split(":").first
    port = fulldomain.split("@")[1].split(":")[1]
    return [username, domain, port]
  end

  # def makeGroup
  #   alias_path = ".aka/alias.yml"
  #   group_path = ".aka/group.yml"
  #   FileUtils.touch(group_path) if File.exist?(group_path)
  #   #write yaml file
  #   File.open(group_path, 'w') do |f|
  #     f.write("")
  #   end
  # end

  def add input
    if input and show_alias(input).first == false and not_empty_alias(input) == false
      array = input.split("=")
      full_command = "\nalias #{array.first}='#{array[1]}'"
      File.open(read_yml(".config")["location"], 'a') { |file| file.write(full_command) }
      puts "Added: #{full_command} to #{read_yml(".config")["location"]}"
      return true
    else
      puts "The alias is already present."
      return false
    end
  end

  def not_empty_alias input
    array = input.split("=")
    return true if array.count < 2
    return array[1].strip == ""
  end

  def show_alias argument
    # puts "show_alias"
    if content = File.open(read_yml(".config")["location"]).read
      content.gsub!(/\r\n?/, "\n")
      content_array = content.split("\n")
      content_array.each_with_index { |line, index|
        value = line.split(" ")
        if value.length > 1 and value.first == "alias"
          answer = value[1].split("=")
          if found?(answer.first, argument.split("=").first, line) == true
            # return [true, answer.first]
            return [true, answer.first, answer[1]]
          end
        end
      }
    else
      puts "#{@pwd} cannot be found.".red
      return [false, nil, nil]
      # return [false, nil]
    end
    return [false, nil, nil]
    # return [false, nil]
  end

  # def show argument
  #   if content = File.open(read_yml(".config")["location"]).read
  #     content.gsub!(/\r\n?/, "\n")
  #     content_array = content.split("\n")
  #     content_array.each_with_index { |line, index|
  #       value = line.split(" ")
  #       if value.length > 1 and value.first == "alias"
  #         answer = value[1].split("=")
  #         if found?(answer.first, argument, line)
  #           return true
  #         end
  #       end
  #     }
  #   else
  #     puts "#{@pwd} cannot be found.".red
  #     return false
  #   end
  #   puts "No alias is found.".red
  #   return false
  # end

  def remove input
    if content=File.open(read_yml(".config")["location"]).read
      content.gsub!(/\r\n?/, "\n")
      content_array= content.split("\n")
      content_array.each_with_index { |line, index|
        value = line.split(" ")
        if value.length > 1 and value.first == "alias"
          answer = value[1].split("=")
          if answer.first == input
            content_array.delete_at(index) and write_with_newline(content_array)
            puts "Removed: #{line} from #{Dir.home}/.bash_profile".red
            return true
          end
        end
      }
    else
      puts "#{@pwd} cannot be found.".red
      return false
    end
  end

  # def find input
  #   if input == nil
  #     puts "Press q to cancel. or press ctrl+z to stop".red
  #     input = ask "Which alias to find: (q to quit)"
  #     if input == "q"
  #       puts "Exit." and exit()
  #     end
  #   end
  #
  #   founded = false
  #   if content=File.open(read_yml(".config")["location"]).read
  #     content.gsub!(/\r\n?/, "\n")
  #     content_array = content.split("\n")
  #     content_array.each_with_index { |line, index|
  #       value = line.split(" ")
  #       if value.length > 1 and value.first == "alias"
  #         answer = value[1].split("=")
  #         if found?(answer.first, input, line) == true
  #           founded = true
  #         end
  #       end
  #     }
  #     puts "nothing is found." if founded == false
  #   end
  # end

  # def record method, command
  #   record = method + "," + command + "," + Time.now.to_s
  #   append(record,".history")
  # end

  def history
    if content = File.open(bash_history_path).read
      puts ".bash_history is available"
      count=0
      content.gsub!(/\r\n?/, "\n")
      content_array = content.split("\n")
      content_array.each_with_index { |line, index|
        array = line.split(" ")
        if array.first == "alias"
          count += 1
        end
        puts "#{index+1} #{line}"
      }
      puts "There are #{count} histories"
    else
      puts ".bash_history is not available".red
    end
  end

  def version
    puts ""
    puts "aka #{program(:version)} - #{program(:last_update)}"
    puts "#{program(:author)} - #{program(:contact)}"
    puts "https://github.com/ytbryan/aka"
  end

  def found? answer, argument, line
    if answer == argument
      puts "Found -> " + line.red
      return true
    else
      return false
    end
  end

  def update
    system("sudo rm -rf /usr/local/bin/aka; curl -o /usr/local/bin/aka https://raw.githubusercontent.com/ytbryan/aka/master/cmd/aka; chmod 755 /usr/local/bin/aka") #download the ruby file into _plugins
  end

  def edit newcommand, this_alias
    return append("alias " + this_alias + "='" + newcommand + "'", read_yml(".config")["location"] )
  end

  def edit_alias newalias, thiscommand
    return append("alias " + newalias + "='" + thiscommand + "'", read_yml(".config")["location"] )
  end


  def count
    alias_count = 0
    if content=File.open(read_yml(".config")["location"]).read
      content.gsub!(/\r\n?/, "\n")
      content_array= content.split("\n")
      content_array.each_with_index { |line, index|
        value = line.split(" ")
        if value.length > 1 and value.first == "alias"
          answer = value[1].split("=")
          alias_count += 1
        end
      }
      return alias_count
    end
  end

  def insert_trap
    input = ask "Make your your dot file auto reload #{read_yml(".config")["location"]}? (y/N)"
    if input == 'y'
      trap = "sigusr1() { source ~/.bash_profile; history -a; echo 'reloaded dot file and history file'; }\ntrap sigusr1 SIGUSR1"
      append(trap, read_yml('.config')['location'])
    end
  end

  def write_to_location location, address
    if aka_directory_exists?
      write(location, address)
    else
      puts ".aka not found.".red
    end
  end

  def read location
    answer = dot_location_exists?(location)
    if answer == true and content = File.open(location).read
      return content
    end
    return ""
  end

  #find out if file in .location exist
  def dot_location_exists? address
    return File.exist? address
  end

  #if .aka exist?
  def aka_directory_exists?
    return File.directory?("#{Dir.home}/.aka")
  end

  def showlast howmany=10
    if content = File.open(read_yml(".config")["location"]).read
      content.gsub!(/\r\n?/, "\n")
      content_array = content.split("\n")
      #why not just call the last five lines? Because i can't be sure that they are aliases
      total_aliases = []
      content_array.each_with_index { |line, index|
        value = line.split(" ")
        if value.length > 1 and value.first == "alias"
          total_aliases.push(line)
        end
      }
      puts ""
      if total_aliases.count > howmany
        total_aliases.last(howmany).each_with_index do |line, index|
          puts "#{total_aliases.count - howmany + index+1}. " + line
        end
      else
        total_aliases.last(howmany).each_with_index do |line, index|
          puts "#{index+1}. " + line
        end

      end
      puts ""
    end
  end

  def showUsage howmany=10
    value = reload_dot_file()
    if content = File.open(read_yml(".config")["history"]).read
      content.gsub!(/\r\n?/, "\n")
      content_array = content.split("\n")
      total_aliases = []
      content_array.each_with_index { |line, index|
        value = line.split(" ")
        total_aliases.push(value.first)
      }
      count_aliases(total_aliases, howmany)
    end
  end

  def count_aliases array, howmany
    name_array,count_array = [], []
    #find the unique value
    array.each_with_index { |value, index|
      if name_array.include?(value) == false
        name_array.push(value)
      end
    }
    #count the value
    name_array.each { |unique_value|
      count = 0
      array.each { |value|
        if (unique_value == value)
          count+=1
        end
      }
      count_array.push(count)
    }

    sorted_count_array, sorted_name_array = sort(count_array, name_array)

    # #print out
    if sorted_count_array.count == sorted_name_array.count
      puts ""
      sorted_name_array.first(howmany).each_with_index { |value, index|
        percent = ((sorted_count_array[index]).round(2)/array.size.round(2))*100
        str = "#{index+1}. #{value}"
        puts "#{str} #{showSpace(str)} #{showBar(percent)}"
      }
      puts ""
    else
      puts "something is wrong: count_array.count = #{sorted_count_array.count}\n
            name_array.count = #{sorted_name_array.count}. Please check your .bash_history.".pretty
    end
    puts "There's a total of #{array.size} lines in #{read_yml(".config")["history"]}."
  end

  def sort(countarray, namearray) #highest first. decscending.
    temp = 0, temp2 = ""
    countarray.each_with_index { |count, index|
      countarray[0..countarray.size-index].each_with_index { |x, thisindex|  #always one less than total

        if index < countarray.size-1 and thisindex < countarray.size-1
          if countarray[thisindex] < countarray[thisindex+1] #if this count is less than next count
            temp = countarray[thisindex]
            countarray[thisindex] = countarray[thisindex+1]
            countarray[thisindex+1] = temp

            temp2 = namearray[thisindex]
            namearray[thisindex] = namearray[thisindex+1]
            namearray[thisindex+1] = temp2
          end
        end

      }
    }#outer loop
    return countarray, namearray
  end

  def get_latest_history_file
    system("history -a")
  end

  def increase_history_limit
    #append to /etc/profile
    append("export HISTSIZE=10000","/etc/profile")
  end

  def cleanup
    puts "entered cleanup"
    if content = File.open("#{read_yml(".config")["location"]}").read
      puts "yes?"
      content.gsub!(/\r\n?/, "\n")
      content_array = content.split("\n")
      total_aliases = []
      content_array.each_with_index { |line, index|
        if line == ""
          content_array.delete_at(index)
        end
      }
      write_with_newline(content_array)
    end
  end

  ################################################
  ## Getting these babies ready for beauty contest
  ################################################

  class String
    def pretty
      return self.gsub("\s\t\r\f", ' ').squeeze(' ')
    end

    def is_i?
      !!(self =~ /\A[-+]?[0-9]+\z/)
    end
  end

  def showSpace word
    space = ""
    val = 20 - word.size
    val = 20 if val < 0
    val.times do
      space += " "
    end
    return space
  end

  def showBar percent
    result = ""
    val = percent/100 * 50
    val = 2 if val > 1 and val < 2
    val = 1 if val.round <= 1 #for visibiity, show two bars if it's just one
    val.round.times do
      result += "/"
    end
    return result + " #{percent.round(2)}%"
  end

  # command :start do |c|
  #   c.syntax = 'aka switch [options]'
  #   c.summary = 'switch to zsh'
  #   c.action do |args, options|
  #     question = "Which bash file are you using?
  #                 1. .zsh
  #                 2. .bash_profile
  #                 3. .bashrc".pretty
  #     input = ask question
  #   end
  # end


  # command :config do |c|
  #   c.action do |args, options|
  #     # theyml = Hash.new
  #     # theyml["location"] = "~/.aka/.location"
  #     # theyml["global"] = "/Users/ytbryan/.bash_profile"
  #     # theyml["groups"] = "~/.aka/groups"
  #     # theyml["remote"] = "255, admin, 12.12.12.233"
  #     # theyml["path"] = "~/.aka"
  #     # write_yml(".config", theyml)
  #     FileUtils.touch(read_yml(".config")["location"])
  #   end
  # end
  #
  # command :readconfig do |c|
  #   c.action do |args, options|
  #     puts "read_yml('.config')['location'] ->#{read_yml(".config")["location"].class} -> #{read_yml(".config")["location"]}"
  #     puts "read_yml(".config")["location"] -> #{ read_yml(".config")["location"].class} -> #{ read_yml(".config")["location"]}"
  #     puts "#{program(:path_to_location).class} -> #{program(:path_to_location)}"
  #   end
  # end
  #
