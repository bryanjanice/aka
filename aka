#!/usr/bin/env ruby
require 'rubygems'
require 'commander/import'
require 'highline/import'
require 'net/scp'
require 'colorize'

default_command :version #note that this is calling version(), not program(:version)

# always_trace
program :help_formatter, :compact
program :author, 'ytbryan'
program :contact, 'Bryan Lim <ytbryan@gmail.com>'
program :version, '0.2.33'
program :last_update, '01 Jan 2015' #not going to update
program :description, 'add, edit, manage aliases from terminal.'
# program :location, ".bash_profile" #bash
program :location, ".zshrc" #for z shell
# program :location, ".bashrc" for bashrc
program :path_to_location, ".location"

command :eh do |c|
  c.syntax = 'aka switch [options]'
  c.summary = 'switch to zsh'
  c.action do |args, options|
    # system("echo $SHELL") >> answer
    # puts answer
    # puts "hello"
  end
end

command :start do |c|
  c.syntax = 'aka switch [options]'
  c.summary = 'switch to zsh'
  c.action do |args, options|
    question = "Which bash file are you using?
                1. .zsh
                2. .bash_profile
                3. .bashrc".pretty
    input = ask question
  end
end

command :read do |c|
  c.syntax = 'aka switch [options]'
  c.summary = 'switch to zsh'
  c.action do |args, options|
    readFromLocation()
  end
end


command :switch do |c|
  c.syntax = 'aka switch [options]'
  c.summary = 'switch to zsh'
  c.action do |args, options|
    write_to_location("hello")
    # readFromLocation()
  end
end

command :add do |c|
  c.syntax = 'aka add [options]'
  c.summary = 'add an alias'
  c.action do |args, options|
    result = add(args.first) if args.first
    reload_bash_file() if result == true
  end
end

command :show do |c|
  c.syntax = 'aka show [options]'
  c.summary = 'show an alias'
  c.action do |args, options|
    show_alias(args.first) if args.first
  end
end

command :find do |c|
  c.syntax = 'aka find [options]'
  c.summary = 'find an alias'
  c.action do |args, options|
    find(args.first) if args.first
  end
end

command :remove do |c|
  c.syntax = 'aka remove [options]'
  c.summary = 'remove an alias'
  c.action do |args, options|
    remove(args.first) if args.first
    reload_bash_file()
  end
end
alias_command :'rm', :remove

command :edit do |c|
  c.syntax = 'aka edit [options]'
  c.summary = 'edit the alias'
  c.action do |args, options|
    a, b = show_alias(args.first)
    if a == true
      input = ask "Enter a new command for alias '#{args.first}'?\n"
      answer = ask "#{input} confirm? (y/N)"
      if answer == 'y'
        remove(b) #remove that alias
        edit(input, b) #edit that alias
        reload_bash_file()
      end
    else
      puts "alias '#{args.first}' cannot be found".red
    end
  end
end


command :command do |c|
  c.syntax = 'aka commands [options]'
  c.summary = 'show the list of commands'
  c.action do |args, options|
    commands()
  end
end
alias_command :'cmd', :command

command :version do |c|
  c.syntax = 'aka version'
  c.summary = 'show the version of this aka'
  c.action do |args, options|
    version()
    puts ""
  end
end
alias_command :v, :version

command :update do |c|
  c.syntax = 'aka update [options]'
  c.summary = 'update the old copy of aka to a newer one'
  c.action do |args, options|
    update()
  end
end

command :count do |c|
  c.syntax = 'aka count [options]'
  c.summary = 'count number of alias'
  c.action do |args, options|
    puts "#{count()} aliases from #{Dir.home}/#{program(:location)}"
  end
end

###########################
### DEVELOPMENT
###########################

command :build do |c|
  c.syntax = 'aka build [options]'
  c.summary = 'build the VERSION files and run tests'
  c.action do |args, options|
    build()
    #run tests
  end
end

command :copy do |c|
  c.syntax = 'aka copy [options]'
  c.summary = 'copy a local copy of aka to /usr/local/bin'
  c.action do |args, options|
    result = system("sudo cp aka /usr/local/bin")
    puts "a new copy of aka #{program(:version)} is installed to /usr/local/bin \nat #{Time.now.strftime("%I:%M%p, %A, %d %b %Y")}.".red if result == true
    puts "" if result == true
  end
end

command :bundle do |c|
  c.syntax = 'aka bundle [options]'
  c.summary = 'bundle install the gemfile in .aka'
  c.action do |args, options|
    system("cd ~/.aka")
    system("bundle install")
  end
end

command :uninstall do |c|
  c.syntax = 'aka uninstall [options]'
  c.summary = 'uninstall aka'
  c.action do |args, options|
    system("sudo rm -rf ~/.aka; sudo rm -rf /usr/local/bin/aka;")
  end
end

command :open do |c|
  c.syntax = 'aka open [options]'
  c.summary = 'simply open the bashfile'
  c.action do |args, options|
    system("at  #{Dir.home}/#{program(:location)}")
  end
end

command :set do |c|
  c.syntax = 'aka set [options]'
  c.summary = 'set the path of your bash config file'
  c.action do |args, options|
    # FileUtils.mkdir("#{Dir.home}/.aka") if File.directory?("#{Dir.home}/.aka")
    FileUtils.touch("#{Dir.home}/.aka/location") if File.exists?("#{Dir.home}/.aka/location")
    File.write("#{Dir.home}/.aka/location", args.first) if File.exists?(args.first) #if the file exists
  end
end

#aka bb --from path_from_remote --to ytbryan@12312.12.312.3.12.3 --of /path_th_local
# ./aka beamback --from /home/ytbryan/hello --to admin@xxx.xxx.xxx.xxx:port_number_here --of /Users/ytbryan/Desktop/hello
  command :download do |c|
    c.syntax = 'aka download [options]'
    c.summary = 'download a file from server'
    c.action do |args, options|
      if options.from and options.to and options.of
        arr = split(options.to.to_s)
        pw = ask "What's the password?"
        result = Net::SCP.download!(arr[1], #remote
        arr.first,#username
        options.from.to_s, #remote_path
        options.of.to_s, #local_path
        :ssh => {:password => pw,
          :port => arr[2]}) if pw
        end
      end
    end
    alias_command :dl, :download


    command :upload do |c|
      c.syntax = 'aka upload [options]'
      c.summary = 'upload a file to server'
      c.action do |args, options|
        if options.from and options.to and options.of
          if File.exists?(options.from.to_s)
            arr = split(options.to.to_s)
            result = Net::SCP.upload!(arr[1], #remote
            arr.first, #username
            options.from.to_s, #local_path
            options.of.to_s, #remote_path
            :ssh => {:port => arr[2]})
          else
            puts "Cannot find #{options.from}"
          end
        end

      end
    end

  #############################
  ## Tests
  #############################
  command :test do |c|
    c.syntax = 'aka test [options]'
    c.summary = 'run the tests'
    c.action do |args, options|
      #run the tests
    end
  end

  #############################
  ## Experimental
  #############################

  # command :undo do |c|
  #   c.syntax = 'aka undo [options]'
  #   c.summary = 'undo a removal of alias'
  #   c.action do |args, options|
  #     puts "this undo"
  #   end
  # end

  # command :scan do |c|
  #   c.syntax = 'aka scan [options]'
  #   c.summary = ''
  #   c.action do |args, options|
  #     scan()
  #   end
  # end

  # command :group do |c|
  #   c.syntax = 'aka group [options]'
  #   c.summary = 'create a new group for aliases'
  #   c.action do |args, options|
  #
  #   end
  # end
  # alias_command :g, :group


  #############################
  ## Methods
  #############################

  private

  def reload_bash_file()
    system("kill -SIGUSR1 #{Process.ppid}")
  end

  def split_domain_user fulldomain
    username = fulldomain.split("@").first
    domain = fulldomain.split("@")[1]
    return [username, domain]
  end

  def split fulldomain
    username = fulldomain.split("@").first
    domain = fulldomain.split("@")[1].split(":").first
    port = fulldomain.split("@")[1].split(":")[1]
    return [username, domain, port]
  end

  def makeGroup
    alias_path = ".aka/alias.yml"
    group_path = ".aka/group.yml"
    FileUtils.touch(group_path) if File.exist?(group_path)
    #write yaml file
    File.open(group_path, 'w') do |f|
      f.write("")
    end
    #write to group file
    #backup group
    #make .aka file
  end

  def not_empty_alias input
    array = input.split("=")
    return true if array.count < 2
    return array[1].strip == ""
  end

  def add input
    if input and show_alias(input).first == false and not_empty_alias(input) == false
      array = input.split("=")
      full_command = "\nalias #{array.first}='#{array[1]}'"
      File.open(get_bash_profile_path, 'a') { |file| file.write(full_command) }
      puts "Added: #{full_command} to #{get_bash_profile_path}"
      return true
    else
      puts "The alias is already present."
      return false
    end
  end

  def write_new_file array
    File.open(get_bash_profile_path, 'w') { |file|
      array.each do |line|
        file.write(line + "\n")
      end
    }
  end

  def write str, path
    File.open(path, 'w') { |file|
      file.write(str)
    }
  end

  def append str, path
    File.open(path, 'a') { |file|
      file.write(str)
    }
  end

  def get_bash_profile_path
    return "#{Dir.home}/#{program(:location)}"
  end

  def show_alias argument
    if content = File.open(get_bash_profile_path).read
      content.gsub!(/\r\n?/, "\n")
      content_array = content.split("\n")
      content_array.each_with_index { |line, index|
        value = line.split(" ")
        if value.length > 1 and value.first == "alias"
          answer = value[1].split("=")
          if found?(answer.first, argument.split("=").first, line) == true
            return [true, answer.first]
          end
        end
      }
    else
      puts "#{@pwd} cannot be found.".red
      return [false, nil]
    end
    return [false, nil]
  end

  def show argument
    if content = File.open(get_bash_profile_path).read
      content.gsub!(/\r\n?/, "\n")
      content_array = content.split("\n")
      content_array.each_with_index { |line, index|
        value = line.split(" ")
        if value.length > 1 and value.first == "alias"
          answer = value[1].split("=")
          if found?(answer.first, argument, line)
            return true
          end
        end
      }
    else
      puts "#{@pwd} cannot be found.".red
      return false
    end
    puts "No alias is found.".red
    return false
  end


  def remove input
    if content=File.open(get_bash_profile_path).read
      content.gsub!(/\r\n?/, "\n")
      content_array= content.split("\n")
      content_array.each_with_index { |line, index|
        value = line.split(" ")
        if value.length > 1 and value.first == "alias"
          answer = value[1].split("=")
          if answer.first == input
            content_array.delete_at(index) and write_new_file(content_array)
            puts "Removed: #{line} from #{Dir.home}/.bash_profile".red
          end
        end
      }
    else
      puts "#{@pwd} cannot be found.".red
    end
  end

  def find input
    if input == nil
      puts "Press q to cancel. or press ctrl+z to stop".red
      input = ask "Which alias to find: (q to quit)"
      if input == "q"
        puts "Exit." and exit()
      end
    end

    founded = false
    if content=File.open(get_bash_profile_path).read
      content.gsub!(/\r\n?/, "\n")
      content_array = content.split("\n")
      content_array.each_with_index { |line, index|
        value = line.split(" ")
        if value.length > 1 and value.first == "alias"
          answer = value[1].split("=")
          if found?(answer.first, input, line) == true
            founded = true
          end
        end
      }
      puts "nothing is found." if founded == false
    end
  end

  def record method, command
    record = method + "," + command + "," + Time.now.to_s
    append(record,".history")
  end

  #moved
  def history
    if content = File.open(bash_history_path).read
      puts ".bash_history is available"
      count=0
      content.gsub!(/\r\n?/, "\n")
      content_array = content.split("\n")
      content_array.each_with_index { |line, index|
        array = line.split(" ")
        if array.first == "alias"
          count += 1
        end
        puts "#{index+1} #{line}"
      }
      puts "There are #{count} histories"
    else
      puts ".bash_history is not available".red
    end
  end

  #moved
  # def uninstall
  #   input = ""
  #   while input == ""
  #     input = ask "Remove aka? (y/N)".red
  #     if input == "N"
  #       puts "cancel."
  #     elsif input == "y"
  #       system("sudo rm #{@localbin}/aka")
  #       puts "aka removed from #{@localbin}".red
  #     end
  #   end
  # end

  # def set
  #   puts "TODO: path"
  #   system("touch ~/.aka/path")
  #   if content = File.open(bash_history_path).read
  #   end
  # end

  def version
    puts ""
    puts "aka #{program(:version)} - #{program(:last_update)}"
    puts "#{program(:author)} - #{program(:contact)}"
    puts "https://github.com/ytbryan/aka"
  end

  def footer
    puts ""
    puts "Check out 'aka help' for more information about specific commands"
    puts "For full documentation, see: http://github.com/ytbryan/aka#readme"
    puts ""
  end

  def commands
    puts ""
    puts "Some useful aka commands include: "
    puts ""
    puts "-s, -save        save a copy of your dotfile"
    puts "-h, -help        show a list of options and commands"
    puts "-set             set the path to your dotfile"
    puts "-rm, -remove     remove an alias"
    puts "-v, -version     show version of aka"
    puts "-c, -commands    list all the commands"
    puts "-un, -uninstall  uninstall aka"
    puts "-e, -edit        edit aliases"
  end

  def found? answer, argument, line
    if answer == argument
      puts "Found -> " + line.red
      return true
    else
      return false
    end
  end

  def update
    system("sudo rm -rf /usr/local/bin/aka; curl -o /usr/local/bin/aka https://raw.githubusercontent.com/ytbryan/aka/master/cmd/aka; chmod 755 /usr/local/bin/aka") #download the ruby file into _plugins
  end

  def build
    write(program(:version), './VERSION')
    puts "VERSION #{program(:version)} created at #{Time.now.strftime("%I:%M%p, %A, %d %b %Y")}"
  end

  def edit newcommand, this_alias
    return append("alias " + this_alias + "='" + newcommand + "'", get_bash_profile_path )
  end

  def count
    if content=File.open(get_bash_profile_path).read
      content.gsub!(/\r\n?/, "\n")
      content_array= content.split("\n")
      return content_array.count
    end
  end

  def insert_trap
    trap = "sigusr1() { source ~/.bash_profile;  echo 'reloaded  ~/.bash_profile'; }\ntrap sigusr1 SIGUSR1"
    append(trap, "#{Dir.home}/#{program(:location)}")
  end

  def aka_directory_exist?
    return File.directory?("#{Dir.home}/.aka")
  end

  def write_to_location address
    if aka_directory_exist?
      write("#{Dir.home}/#{program(:location)}","#{Dir.home}/.aka/#{program(:path_to_location)}")
    else
      puts ".aka not found.".red
    end
  end

  def readFromLocation
    if content = File.open("#{Dir.home}/.aka/#{program(:path_to_location)}").read
      puts "#{Dir.home}/.aka/#{program(:path_to_location)} is available."
      puts content
      # count=0
      # content.gsub!(/\r\n?/, "\n")
      # content_array = content.split("\n")
      # content_array.each_with_index { |line, index|
      #   array = line.split(" ")
      #   if array.first == "alias"
      #     count += 1
      #   end
      #   puts "#{index+1} #{line}"
      # }
      # puts "There are #{count} histories"
    else
      puts "#{Dir.home}/.aka/#{program(:path_to_location)} is unavailable.".read
    end
  end



  class String
    def pretty
      return self.gsub("\s\t\r\f", ' ').squeeze(' ')
    end
  end
