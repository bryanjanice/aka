#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'

program :version, '0.0.6'
program :description, 'aliases best friend'

command :add do |c|
  c.syntax = 'aka add [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Add
  end
end

command :show do |c|
  c.syntax = 'aka show [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Show
  end
end

command :remove do |c|
  c.syntax = 'aka remove [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Remove
  end
end

command :find do |c|
  c.syntax = 'aka find [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Find
  end
end

command :edit do |c|
  c.syntax = 'aka edit [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Edit
  end
end

#aka b /path_to_ --to ip_address_ --of path_ofthe_file
command :beam do |c|
  c.syntax = 'aka beam [options]'
  c.option '--from STRING', String, 'Some switch that does something'
  c.option '--to STRING', String, 'Some switch that does something'
  c.option '--of STRING', String, 'Some switch that does something'
  c.action do |args, options|
    # puts options.from.to_s
    # puts options.to.to_s
    # puts options.of.to_s
    #check that the file is present

    if options.from and options.to and options.of
      if File.exists?(options.from.to_s)
        answer = system("scp #{options.from} #{options.to} #{options.of}") if File.exists?(options.from.to_s)
      else
        puts "Cannot find #{options.from}"
      end
    end
    # Do something or c.when_called Aka::Commands::Remote
    # ask "What is your path?\n 1> .bash_profile\n 2> .bashrc\n 3> Others"
    # ask "What is the foreign ip?"
    # ask "Where to put this bashfile?"
    # aka beam -i foreign_ip -p path_to_each -f foreign_path
  end
end


command :remote do |c|
  c.syntax = 'aka remote [options]'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Remote
  end
end

command :group do |c|
  c.syntax = 'aka group [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Group
  end
end

command :commands do |c|
  c.syntax = 'aka commands [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Commands
  end
end

command :save do |c|
  c.syntax = 'aka save [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Save
  end
end

command :version do |c|
  c.syntax = 'aka version [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Version
  end
end

command :install do |c|
  c.syntax = 'aka install [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Install
  end
end

command :uninstall do |c|
  c.syntax = 'aka uninstall [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Uninstall
  end
end

command :todos do |c|
  c.syntax = 'aka todos [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Todos
  end
end

command :scan do |c|
  c.syntax = 'aka scan [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--some-switch', 'Some switch that does something'
  c.action do |args, options|
    # Do something or c.when_called Aka::Commands::Scan
  end
end



private

def answer(thisThing)
value = thisThing.to_s
  puts "This is --from => #{value}"
    # puts thisThing.to_s
end


def remote()

end
